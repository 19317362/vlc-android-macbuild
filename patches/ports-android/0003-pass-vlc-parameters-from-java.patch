From ae9d2e98168deeb330b7634cdafc3b6adf726bb1 Mon Sep 17 00:00:00 2001
From: bbcallen <bbcallen@gmail.com>
Date: Fri, 16 Mar 2012 15:26:55 +0800
Subject: [PATCH] pass vlc parameters from java

---
 vlc-android/jni/libvlcjni.c                  |   58 ++++++++++++++++++++++++++
 vlc-android/src/org/videolan/vlc/LibVLC.java |   29 +++++++++----
 2 files changed, 79 insertions(+), 8 deletions(-)

diff --git a/vlc-android/jni/libvlcjni.c b/vlc-android/jni/libvlcjni.c
index 1c99033..abbff24 100644
--- a/vlc-android/jni/libvlcjni.c
+++ b/vlc-android/jni/libvlcjni.c
@@ -1,5 +1,10 @@
 /*****************************************************************************
  * libvlcjni.c
+ *
+ * Modified:
+ *  - 2012-03-16 --bbcallen <bbcallen@gmail.com>
+ *      pass vlc arguments from java
+ *      http://blog.moenyan.net/?p=18
  *****************************************************************************
  * Copyright Â© 2010-2012 VLC authors and VideoLAN
  *
@@ -214,6 +219,59 @@ void Java_org_videolan_vlc_LibVLC_detachSurface(JNIEnv *env, jobject thiz) {
     pthread_mutex_unlock(&vout_android_lock);
 }
 
+void Java_org_videolan_vlc_LibVLC_nativeInitEx(JNIEnv *env, jobject thiz, jarray arguments)
+{
+    /* Don't add any invalid options, otherwise it causes LibVLC to crash */
+    static const char *argv[] = {
+        "-I", "dummy",
+        "-vv",
+        "--no-osd",
+        "--no-video-title-show",
+        "--no-stats",
+        "--no-plugins-cache",
+        "--no-drop-late-frames",
+        "--control", "logger",
+        "--logmode", "android",
+        "--ffmpeg-fast",
+    };
+
+    libvlc_instance_t *instance = NULL;
+    if (arguments != NULL)
+    {
+        int user_argc = (*env)->GetArrayLength(env, arguments);
+        char **user_argv = (char **) calloc(user_argc, sizeof(char *));
+        int i = 0;
+        for (i = 0; i < user_argc; i++)
+        {
+            jstring argument = (*env)->GetObjectArrayElement(env, arguments, i);
+            if (argument)
+                user_argv[i] = (char *) (*env)->GetStringUTFChars(env, argument, NULL);
+        }
+        instance = libvlc_new(user_argc, (const char **) user_argv);
+        for (i = 0; i < user_argc; i++)
+        {
+            jstring argument = (*env)->GetObjectArrayElement(env, arguments, i);
+            if (argument)
+                (*env)->ReleaseStringUTFChars(env, argument, user_argv[i]);
+        }
+    }
+    else {
+    	instance = libvlc_new(sizeof(argv) / sizeof(*argv), argv);
+    }
+
+    jclass clazz = (*env)->GetObjectClass(env, thiz);
+    jfieldID field = (*env)->GetFieldID(env, clazz, "mLibVlcInstance", "I");
+    (*env)->SetIntField(env, thiz, field, (jint) instance);
+
+    if (!instance)
+    {
+        jclass exc = (*env)->FindClass(env, "org/videolan/vlc/LibVlcException");
+        (*env)->ThrowNew(env, exc, "Unable to instantiate LibVLC");
+    }
+
+    LOGI("LibVLC initialized: %p", instance);
+}
+
 void Java_org_videolan_vlc_LibVLC_nativeInit(JNIEnv *env, jobject thiz)
 {
     /* Don't add any invalid options, otherwise it causes LibVLC to crash */
diff --git a/vlc-android/src/org/videolan/vlc/LibVLC.java b/vlc-android/src/org/videolan/vlc/LibVLC.java
index e3f7682..ff78075 100644
--- a/vlc-android/src/org/videolan/vlc/LibVLC.java
+++ b/vlc-android/src/org/videolan/vlc/LibVLC.java
@@ -21,7 +21,6 @@
 package org.videolan.vlc;
 
 import org.videolan.vlc.LibVlcException;
-import org.videolan.vlc.gui.video.VideoPlayerActivity;
 
 import android.util.Log;
 import android.view.Surface;
@@ -47,7 +46,7 @@ public class LibVLC {
     /** Check in libVLC already initialized otherwise crash */
     private boolean mIsInitialized = false;
 
-    public native void attachSurface(Surface surface, VideoPlayerActivity player, int width, int height);
+    public native void attachSurface(Surface surface, Object parentView, int width, int height);
 
     public native void detachSurface();
 
@@ -81,19 +80,33 @@ public class LibVLC {
      * @return
      * @throws LibVlcException
      */
-    public static LibVLC getInstance() throws LibVlcException {
+    private static LibVLC getInstance() throws LibVlcException {
         if (sInstance == null) {
             /* First call */
             sInstance = new LibVLC();
-            sInstance.init();
+            sInstance.initEx(null);
         }
 
         return sInstance;
     }
 
-    public static LibVLC getExistingInstance() {
+    private static LibVLC getExistingInstance() {
         return sInstance;
     }
+    
+    public static void destroyExistingInstance() {
+        if (sInstance != null) {
+            sInstance.destroy();
+            sInstance = null;
+        }
+    }
+
+    public static LibVLC createInstance(String[] params) throws LibVlcException {
+        LibVLC newInstance = new LibVLC();
+        newInstance.initEx(params);
+
+        return newInstance;
+    }
 
     /**
      * Constructor
@@ -139,10 +152,10 @@ public class LibVLC {
     /**
      * Initialize the libVLC class
      */
-    private void init() throws LibVlcException {
+    private void initEx(String[] params) throws LibVlcException {
         Log.v(TAG, "Initializing LibVLC");
         if (!mIsInitialized) {
-            nativeInit();
+            nativeInitEx(params);
             setEventManager(EventManager.getIntance());
             mIsInitialized = true;
         }
@@ -226,7 +239,7 @@ public class LibVLC {
      * Initialize the libvlc C library
      * @return a pointer to the libvlc instance
      */
-    private native void nativeInit() throws LibVlcException;
+    private native void nativeInitEx(String[] params) throws LibVlcException;
 
     /**
      * Close the libvlc C library
-- 
1.7.7.4


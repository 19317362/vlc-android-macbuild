From e0552958cc0a8232e67d836ad89a65e0f9b8819d Mon Sep 17 00:00:00 2001
From: bbcallen <bbcallen@gmail.com>
Date: Thu, 21 Jun 2012 15:47:11 +0800
Subject: [PATCH 30/30] sinaxml: sina xml parser

---
 modules/access/sina/Modules.am |    5 +
 modules/access/sina/sinaxml.c  | 1084 ++++++++++++++++++++++++++++++++++++++++
 2 个文件被修改，插入 1089 行(+)
 create mode 100644 modules/access/sina/Modules.am
 create mode 100644 modules/access/sina/sinaxml.c

diff --git a/modules/access/sina/Modules.am b/modules/access/sina/Modules.am
new file mode 100644
index 0000000..c162655
--- /dev/null
+++ b/modules/access/sina/Modules.am
@@ -0,0 +1,5 @@
+libaccess_sina_plugin_la_SOURCES = sina.c
+libaccess_sina_plugin_la_CFLAGS = $(AM_CFLAGS) $(LIBXML2_CFLAGS)
+libaccess_sina_plugin_la_LIBADD = $(AM_LIBADD) $(LIBXML2_LIBS)
+libaccess_sina_plugin_la_DEPENDENCIES =
+libvlc_LTLIBRARIES += libaccess_sina_plugin.la
\ No newline at end of file
diff --git a/modules/access/sina/sinaxml.c b/modules/access/sina/sinaxml.c
new file mode 100644
index 0000000..a3b4899
--- /dev/null
+++ b/modules/access/sina/sinaxml.c
@@ -0,0 +1,1084 @@
+/*****************************************************************************
+ * sinaxml.c: Sina video xml parser
+ *****************************************************************************
+ *
+ * Authors: Rui Zhang <bbcallen _AT_ gmail _DOT_ com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+/*****************************************************************************
+ * Preamble
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_plugin.h>
+#include <vlc_threads.h>
+#include <vlc_access.h>
+#include <vlc_demux.h>
+#include <vlc_block.h>
+#include <vlc_input.h>
+#include <vlc_es_out_managed.h>
+#include <assert.h>
+
+#include <libxml/parser.h>
+#include <libxml/tree.h>
+#include <libxml/xpath.h>
+#include <libxml/xpathInternals.h>
+
+/* FIXME */
+#include "../../../src/input/demux.h"
+#include "../../../src/input/event.h"
+#include "../../../src/input/es_out.h"
+
+/*****************************************************************************
+ * Module descriptor
+ *****************************************************************************/
+static int  Open ( vlc_object_t * );
+static void Close( vlc_object_t * );
+
+vlc_module_begin ()
+    set_shortname( N_("sinaxml") )
+    set_description( N_("sina v_play xml parser") )
+    set_category( CAT_INPUT )
+    set_subcategory( SUBCAT_INPUT_ACCESS )
+    set_capability( "access_demux", 100 )
+    add_shortcut( "sinaxml" )
+    set_callbacks( Open, Close )
+vlc_module_end ()
+
+/*****************************************************************************
+ * Documentation
+ *  example: http://v.iask.com/v_play.php?vid=71442057
+ *****************************************************************************/
+
+/*****************************************************************************
+ * Local prototypes
+ *****************************************************************************/
+typedef struct
+{
+    /* will not change after parsed */
+    int             i_order;
+    int64_t         i_duration;         /* (microsecond) */
+    int64_t         i_start_time;       /* (microsecond) */
+    char            *p_url;
+
+    /* segment data */
+    vlc_mutex_t     lock;
+
+    stream_t        *p_stream;          /* segment stream */
+    demux_t         *p_demux;           /* segment demux */
+
+    stream_t        *p_origin_stream;   /* weak referece */
+    stream_t        *p_membuf_filter;   /* weak referece */
+} sina_segment_t;
+
+typedef struct
+{
+    vlc_array_t *p_segment_array;   /* list of segments */
+    int64_t      i_total_duration;  /* (microsecond) */
+} sina_playlist_t;
+
+struct demux_sys_t
+{
+    /* */
+    char                *p_playlist_url;
+
+    /* */
+    vlc_mutex_t         lock;
+    sina_playlist_t     *p_playlist;
+
+    sina_segment_t      *p_segment;     /* current playing segment, weak reference */
+    int                 i_last_total_cached_percent;
+
+    /* */
+    es_out_t            *p_out_managed; /* passed to sub demux */
+
+    bool                b_segment_changed;
+};
+
+static int Control( demux_t *p_demux, int i_query, va_list args );
+static int Demux( demux_t *p_demux );
+
+static demux_sys_t *sina_Alloc( void );
+static void         sina_Free( demux_sys_t* p_sys);
+
+static sina_playlist_t *sina_OpenPlayList( demux_t* p_demux, const char *p_playlist_url );
+
+static int sina_AssureOpenSegment( demux_t *p_demux, int i_demux );
+
+#define msg_SinaDebug msg_Err
+
+/****************************************************************************
+ * Module Open/Close
+ ****************************************************************************/
+static int Open( vlc_object_t *p_this )
+{
+    demux_t     *p_demux = (demux_t*) p_this;
+    demux_sys_t *p_sys = NULL;
+
+    msg_Dbg( p_demux, "check access: %s", p_demux->psz_access );
+    if( !p_demux->psz_access || 0 != strcmp( p_demux->psz_access, "sinaxml" ) )
+        goto EXIT_ERROR;
+
+    msg_Dbg( p_demux, "check location: %s", p_demux->psz_location );
+    const char* p_location_prefix = "v.iask.com/v_play.php?vid=";
+    if( !p_demux->psz_location || 0 != strncmp( p_demux->psz_location, p_location_prefix, strlen(p_location_prefix) ) )
+        goto EXIT_ERROR;
+
+    /* Init p_demux */
+    p_sys = sina_Alloc();
+    if( !p_sys )
+        goto EXIT_ERROR;
+
+    p_sys->p_playlist_url = malloc(strlen( "http://" ) +
+                                   strlen( p_demux->psz_location ) +
+                                   1);
+    sprintf( p_sys->p_playlist_url, "http://%s", p_demux->psz_location );
+
+    /* Open play list */
+    p_sys->p_playlist = sina_OpenPlayList( p_demux, p_sys->p_playlist_url );
+    if( !p_sys->p_playlist )
+    {
+        msg_Err( p_demux, "access_sina failed to open play list" );
+        goto EXIT_ERROR;
+    }
+
+    assert( p_sys->p_playlist );
+    assert( p_sys->p_playlist->p_segment_array );
+    assert( vlc_array_count( p_sys->p_playlist->p_segment_array ) > 0 );
+
+    p_sys->p_out_managed = demux_EsOutManagedNew( p_demux, p_demux->out );
+
+    p_demux->p_sys = p_sys;
+    if( VLC_SUCCESS != sina_AssureOpenSegment( p_demux, 0 ) )
+    {
+        msg_Err( p_demux, "failed to open demux for head segment" );
+        goto EXIT_ERROR;
+    }
+
+    p_demux->pf_control = Control;
+    p_demux->pf_demux = Demux;
+
+    return VLC_SUCCESS;
+
+EXIT_ERROR:
+    if( p_sys )
+    {
+        if( p_sys->p_out_managed )
+            es_out_Delete( p_sys->p_out_managed );
+        sina_Free(p_sys);
+    }
+    p_demux->p_sys = NULL;
+
+    return VLC_EGENERIC;
+}
+
+static void Close(vlc_object_t *p_this)
+{
+    demux_t *p_demux = (demux_t *) p_this;
+    demux_sys_t *p_sys = p_demux->p_sys;
+
+    sina_Free(p_sys);
+}
+
+/****************************************************************************
+ * Open/Close
+ ****************************************************************************/
+static sina_segment_t *sina_AllocSegment()
+{
+    sina_segment_t *p_segment = (sina_segment_t *)malloc( sizeof(sina_segment_t) );
+    if( !p_segment )
+        return NULL;
+    memset( p_segment, 0, sizeof(sina_segment_t) );
+
+    vlc_mutex_init( &p_segment->lock );
+
+    return p_segment;
+}
+
+static void sina_FreeSegment( sina_segment_t *p_segment )
+{
+    if( !p_segment )
+        return;
+
+    if( p_segment->p_demux )
+        demux_Delete( p_segment->p_demux );
+
+    if( p_segment->p_stream )
+        stream_Delete( p_segment->p_stream );
+
+    if( p_segment->p_url )
+        free( p_segment->p_url );
+
+    vlc_mutex_destroy(&p_segment->lock);
+    free( p_segment );
+}
+
+static void sina_FreeSegmentArray( vlc_array_t *p_segment_array )
+{
+    if( !p_segment_array )
+        return;
+
+    int count = vlc_array_count( p_segment_array );
+    for(int i = 0; i < count; ++i )
+    {
+        sina_segment_t *p_segment = (sina_segment_t *) vlc_array_item_at_index( p_segment_array, i );
+        if( p_segment )
+        {
+            sina_FreeSegment( p_segment );
+        }
+    }
+
+    vlc_array_destroy( p_segment_array );
+}
+
+static sina_playlist_t *sina_AllocPlayList()
+{
+    sina_playlist_t *p_playlist = (sina_playlist_t *) malloc( sizeof( sina_playlist_t ) );
+    if( !p_playlist )
+        return NULL;
+
+    memset( p_playlist, 0, sizeof( sina_playlist_t ) );
+    return p_playlist;
+}
+
+static void sina_FreePlayList( sina_playlist_t *p_playlist )
+{
+    if( !p_playlist )
+        return;
+
+    vlc_array_t *p_segment_array = p_playlist->p_segment_array;
+    if( p_segment_array )
+        sina_FreeSegmentArray( p_segment_array );
+
+    free( p_playlist );
+}
+
+static demux_sys_t *sina_Alloc()
+{
+    demux_sys_t *p_sys = (demux_sys_t *) malloc( sizeof( demux_sys_t ) );
+    if (!p_sys)
+        return NULL;
+    memset( p_sys, 0, sizeof( demux_sys_t ) );
+
+    vlc_mutex_init( &p_sys->lock );
+
+    return p_sys;
+}
+
+static void sina_Free( demux_sys_t* p_sys )
+{
+    if( !p_sys )
+        return;
+
+    if( p_sys->p_out_managed )
+        es_out_Delete( p_sys->p_out_managed );
+
+    if( p_sys->p_playlist)
+        sina_FreePlayList( p_sys->p_playlist );
+    if( p_sys->p_playlist_url )
+        free( p_sys->p_playlist_url );
+    free( p_sys );
+}
+
+/****************************************************************************
+ * Parse
+ ****************************************************************************/
+static int sina_SegmentOrderCompare( const void *lhs, const void *rhs )
+{
+    const sina_segment_t *seg_lhs = *(const sina_segment_t **) lhs;
+    const sina_segment_t *seg_rhs = *(const sina_segment_t **) rhs;
+    return (seg_lhs->i_order - seg_rhs->i_order);
+}
+
+static vlc_array_t *sina_XPathParseSegmentArray( demux_t *p_demux, xmlXPathContextPtr xp_context, const char* p_xpath )
+{
+    xmlXPathObjectPtr   xp_object = NULL;
+    xmlNodeSetPtr       xp_node_set = NULL;
+    xmlNodePtr          xp_node = NULL;
+    xmlChar             *xp_string = NULL;
+    vlc_array_t         *p_segment_array = vlc_array_new();
+
+    xp_object = xmlXPathEvalExpression( (const xmlChar *) p_xpath, xp_context );
+    if( !xp_object )
+    {
+        msg_Err( p_demux, "failed to call xmlXPathEvalExpression( %s )", p_xpath );
+        goto EXIT_ERROR;
+    }
+
+    xp_node_set = xp_object->nodesetval;
+    if( !xp_node_set || xp_node_set->nodeNr < 1)
+    {
+        msg_Err( p_demux, "empty node set for %s", p_xpath );
+        goto EXIT_ERROR;
+    }
+
+    for( int i = 0; i < xp_node_set->nodeNr; ++i )
+    {
+        sina_segment_t  *p_segment = NULL;
+        xmlNodePtr      child = NULL;
+
+        xp_node = xp_node_set->nodeTab[i];
+        if( !xp_node || xp_node->type != XML_ELEMENT_NODE )
+        {
+            msg_Err( p_demux, "invalid node for %s[%d]", p_xpath, i );
+            goto EXIT_ERROR;
+        }
+
+        p_segment = sina_AllocSegment();
+        if( !p_segment_array )
+            goto EXIT_ERROR;
+
+        child = xp_node->children;
+        while( child->next )
+        {
+            xp_string = xmlNodeGetContent( child );
+            if( 0 == strcmp( (const char *) child->name, "order" ) )
+            {
+                if( !xp_string )
+                    goto EXIT_ERROR;
+
+                p_segment->i_order = atoi( (const char *) xp_string );
+            }
+            else if( 0 == strcmp( (const char *) child->name, "length" ) )
+            {
+                if( !xp_string )
+                    goto EXIT_ERROR;
+
+                p_segment->i_duration = atoi( (const char *) xp_string ) * 1000;
+            }
+            else if( 0 == strcmp( (const char *) child->name, "url" ) )
+            {
+                if( !xp_string )
+                    goto EXIT_ERROR;
+
+                p_segment->p_url = strdup( (const char *) xp_string );
+            }
+            child = child->next;
+        }
+
+        if( !p_segment )
+            goto EXIT_ERROR;
+
+        msg_Info( p_demux, "add segment %d: (%"PRId64") %s",
+                      p_segment->i_order,
+                      p_segment->i_duration,
+                      p_segment->p_url);
+
+        vlc_array_append( p_segment_array, p_segment );
+    }
+
+    if( 0 == vlc_array_count( p_segment_array ) )
+        goto EXIT_ERROR;
+
+    qsort( p_segment_array->pp_elems,
+          vlc_array_count( p_segment_array ),
+          sizeof( sina_segment_t * ),
+          sina_SegmentOrderCompare );
+
+    if( xp_object )
+        xmlXPathFreeObject( xp_object );
+
+    return p_segment_array;
+EXIT_ERROR:
+
+    if( xp_object )
+        xmlXPathFreeObject( xp_object );
+
+    if( p_segment_array)
+        sina_FreeSegmentArray( p_segment_array );
+
+    return NULL;
+}
+
+static sina_playlist_t *sina_ParsePlayList(demux_t *p_demux, const uint8_t *p_playlist_data, size_t data_length)
+{
+    sina_playlist_t     *play_list = NULL;
+    vlc_array_t         *p_segment_array = NULL;
+
+    int                 count = 0;
+    xmlDocPtr           x_doc = NULL;
+    xmlXPathContextPtr  xp_context = NULL;
+
+    x_doc = xmlReadMemory( (const char*) p_playlist_data, data_length, NULL, NULL, 0 );
+    if( !x_doc )
+    {
+        msg_Err( p_demux, "failed to call xmlReadMemory" );
+        goto EXIT_ERROR;
+    }
+
+    xp_context = xmlXPathNewContext( x_doc );
+    if( !xp_context )
+    {
+        msg_Err( p_demux, "failed to call xmlXPathNewContext" );
+        goto EXIT_ERROR;
+    }
+
+    p_segment_array = sina_XPathParseSegmentArray( p_demux, xp_context, "/video/durl" );
+    if( !p_segment_array )
+        goto EXIT_ERROR;
+
+    play_list = sina_AllocPlayList();
+    if( !play_list )
+        goto EXIT_ERROR;
+
+    play_list->i_total_duration = 0;
+    count = vlc_array_count( p_segment_array );
+    for( int i = 0; i < count; ++i )
+    {
+        sina_segment_t *p_segment = (sina_segment_t *)vlc_array_item_at_index( p_segment_array, i );
+        assert( p_segment );
+        msg_Info( p_demux, "%d, total duration %"PRId64" += %"PRId64,
+                      (int) p_segment,
+                      play_list->i_total_duration,
+                      p_segment->i_duration );
+
+        /* force i_order zero-based */
+        p_segment->i_order = i;
+        p_segment->i_start_time += play_list->i_total_duration;
+        if( p_segment->i_duration > 0 )
+            play_list->i_total_duration += p_segment->i_duration;
+    }
+
+    msg_Info( p_demux, "total duration %"PRId64, play_list->i_total_duration );
+    play_list->p_segment_array = p_segment_array;
+
+    p_segment_array = NULL;
+
+EXIT_ERROR:
+
+    if( p_segment_array )
+        sina_FreeSegmentArray( p_segment_array );
+    if( xp_context )
+        xmlXPathFreeContext( xp_context );
+    if( x_doc )
+        xmlFreeDoc( x_doc );
+    /* xmlCleanupParser(); */
+
+    return play_list;
+}
+
+static sina_playlist_t *sina_OpenPlayList(demux_t *p_demux, const char *p_playlist_url)
+{
+    sina_playlist_t *p_playlist = NULL;
+    stream_t        *p_meta_stream = NULL;
+    const uint8_t   *p_meta_data = NULL;
+    int64_t         i_peek_size = 0;
+
+    p_meta_stream = stream_UrlNew( p_demux, p_playlist_url );
+    if( !p_meta_stream )
+    {
+        msg_Err( p_demux, "Failed to open %s", p_playlist_url );
+        goto EXIT_ERROR;
+    }
+
+    i_peek_size = stream_Peek( p_meta_stream, &p_meta_data, 65536 );
+    if( i_peek_size <= 0 || i_peek_size > 65536 )
+        goto EXIT_ERROR;
+
+    msg_Dbg( p_demux, "sina_ParsePlayList:sina_ParsePlayList:\n %*s", (int)i_peek_size, p_meta_data );
+    p_playlist = sina_ParsePlayList( p_demux, p_meta_data, i_peek_size );
+    if( !p_playlist )
+        goto EXIT_ERROR;
+
+    stream_Delete( p_meta_stream );
+    return p_playlist;
+
+EXIT_ERROR:
+    if( p_playlist )
+        sina_FreePlayList( p_playlist );
+    if( p_meta_stream )
+        stream_Delete( p_meta_stream );
+
+    return NULL;
+}
+
+/****************************************************************************
+ * Demux
+ ****************************************************************************/
+static int sina_AssureOpenSegment( demux_t *p_demux, int i_segment )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys );
+
+    int i_playing_segment = 0;
+    if( p_sys->p_segment )
+        i_playing_segment = p_sys->p_segment->i_order;
+
+    assert( p_sys->p_playlist );
+    vlc_array_t *p_segment_array = p_sys->p_playlist->p_segment_array;
+    assert( p_segment_array );
+
+    if( p_sys->p_segment )
+    {
+        if( i_playing_segment == i_segment )
+        {   /* Same segment, just return */
+            return VLC_SUCCESS;
+        }
+        else
+        {   /* Different segment, close current */
+            msg_Info( p_demux, "sina_AssureOpenSegment: change segment" );
+            if( p_sys->p_segment->p_demux )
+            {
+                demux_Delete( p_sys->p_segment->p_demux );
+                p_sys->p_segment->p_demux = NULL;
+
+                /* Reset PCR before use next demux */
+                // es_out_Control( p_demux->out, ES_OUT_RESET_PCR );
+                //if( p_sys->p_out_managed )
+                //    es_out_Control( p_sys->p_out_managed, ES_OUT_POST_DISCONTINUITY );
+            }
+            if( p_sys->p_segment->p_stream )
+            {
+                stream_Delete( p_sys->p_segment->p_stream );
+                p_sys->p_segment->p_stream = NULL;
+            }
+
+            p_sys->b_segment_changed = true;
+        }
+    }
+    else
+    {
+        msg_Info( p_demux, "sina_AssureOpenSegment: new segment" );
+    }
+
+    /* Open new segment */
+    input_thread_t *p_parent_input = demux_GetParentInput( p_demux );
+    assert( p_parent_input );
+
+    int i_segment_count = vlc_array_count( p_segment_array );
+    if( i_segment < 0 || i_segment > i_segment_count )
+    {
+        msg_Err( p_demux, "sina_AssureOpenSegment: invalid segment %d", i_segment );
+        return VLC_EGENERIC;
+    }
+
+    sina_segment_t *p_new_segment = (sina_segment_t *) vlc_array_item_at_index( p_segment_array, i_segment );
+    assert( p_new_segment );
+
+    if( !p_new_segment->p_stream )
+    {
+        for( int i_retry = 0; i_retry < 10; ++i_retry )
+        {
+            if( i_retry > 0 )
+            {
+                if( !vlc_object_alive(p_demux) )
+                    return VLC_EGENERIC;
+
+                /* retry after 1 seconds */
+                msleep( 1000 * 1000 );
+                msg_Info( p_demux, "sina retry segment (%d times)", i_retry );
+
+                /* Reopen play list when retry */
+                msg_Info( p_demux, "sina reload playlist" );
+                sina_playlist_t *p_playlist = sina_OpenPlayList( p_demux, p_sys->p_playlist_url );
+                if( !p_playlist )
+                {
+                    msg_Err( p_demux, "failed to reload play list" );
+                    continue;
+                }
+
+                assert( p_playlist );
+                assert( p_playlist->p_segment_array );
+
+                assert( vlc_array_count( p_playlist->p_segment_array ) > 0 );
+
+                /* Update playlist */
+                assert( p_playlist->p_segment_array );
+
+                i_segment_count = vlc_array_count( p_playlist->p_segment_array );
+                if( i_segment < 0 || i_segment > i_segment_count )
+                {
+                    msg_Err( p_demux, "reload invalid playlist" );
+                    sina_FreePlayList( p_playlist );
+                    continue;
+                }
+
+                p_new_segment = (sina_segment_t *) vlc_array_item_at_index( p_playlist->p_segment_array, i_segment );
+                assert( p_new_segment );
+
+                sina_FreePlayList( p_sys->p_playlist );
+
+                p_segment_array = p_sys->p_playlist->p_segment_array;
+                p_sys->p_playlist = p_playlist;
+            }
+
+            /* Create segment stream */
+            msg_Info( p_demux, "sina open segment stream %d", p_new_segment->i_order );
+
+            const char* p_segment_location = strstr( p_new_segment->p_url, "://" );
+            if( !p_segment_location )
+            {
+                msg_Err( p_demux, "invalid segment url %s", p_new_segment->p_url );
+                return VLC_EGENERIC;
+            }
+
+            char* p_sinahttp_url = NULL;
+            if( asprintf( &p_sinahttp_url, "sinahttp://%s", p_segment_location + 3) < 0)
+            {
+                msg_Err( p_demux, "failed to make sinahttp url %s", p_new_segment->p_url );
+                return VLC_EGENERIC;
+            }
+
+            stream_t *p_stream = stream_UrlNew( p_parent_input, p_sinahttp_url );
+            free( p_sinahttp_url );
+            if( !p_stream )
+            {
+                msg_Err( p_demux, "failed to open stream %s", p_sinahttp_url );
+                continue;
+            }
+
+            /* segment must at least 64k for video longer than 10 seconds */
+            int64_t i_stream_size = stream_Size( p_stream );
+            if( i_stream_size < 64 * 1024 && p_new_segment->i_duration > 10 * 1000 * 1000 )
+            {
+                msg_Err( p_demux, "possible 6-min cursor, retry" );
+                stream_Delete( p_stream );
+                continue;
+            }
+
+            p_new_segment->p_origin_stream = p_stream;
+
+            /* Use membuf to prebuffer segment */
+            stream_t *p_stream_filter = stream_FilterNew( p_stream, "membuf" );
+            if( p_stream_filter )
+            {
+                msg_Dbg( p_demux, "open membuf" );
+                p_stream = p_stream_filter;
+                p_new_segment->p_membuf_filter = p_stream_filter;
+            }
+            else
+            {
+                msg_Err( p_demux, "failed to open membuf" );
+                /* ignore membuf */
+            }
+
+            int64_t segment_size = stream_Size( p_stream );
+            msg_Info( p_demux, "sina segment size %"PRId64, segment_size );
+
+            /* try to peek some data, retry if failed */
+            const uint8_t* p_buf = NULL;
+            int i_peek = stream_Peek( p_stream, &p_buf, 1024 );
+            if( i_peek <= 0 )
+            {
+                stream_Delete( p_stream );
+                continue;
+            }
+
+            p_new_segment->p_stream = p_stream;
+            break;
+        }
+
+        /* Set current segment */
+        p_sys->p_segment = p_new_segment;
+    }
+
+    if( !p_new_segment->p_stream )
+    {
+        msg_Err( p_demux, "sina_AssureOpenSegment: failed to open stream %s", p_new_segment->p_url );
+        return VLC_EGENERIC;
+    }
+
+    if( !p_new_segment->p_demux )
+    {
+        msg_Info( p_demux, "sina open segment demux %d", p_new_segment->i_order );
+        p_new_segment->p_demux = demux_New( p_new_segment->p_stream,
+                                       p_new_segment->p_stream->p_input,
+                                       "", "any", "",
+                                       p_new_segment->p_stream,
+                                       //p_demux->out,
+                                       p_sys->p_out_managed,
+                                       false);
+        if( !p_new_segment->p_demux )
+        {
+            msg_Err( p_demux, "failed to open demux %s", p_new_segment->p_url );
+            return VLC_EGENERIC;
+        }
+
+        /* Set current segment */
+        p_sys->p_segment = p_new_segment;
+    }
+
+    assert( p_sys->p_segment );
+    msg_Info( p_demux, "sina_AssureOpenSegment: succeeded" );
+    return VLC_SUCCESS;
+}
+
+static int Demux( demux_t *p_demux )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+
+    sina_playlist_t *p_playlist = p_sys->p_playlist;
+    assert( p_playlist );
+    assert( p_playlist->p_segment_array );
+
+    bool b_stop_buffering = false;
+    while( p_sys->p_segment && vlc_object_alive(p_demux) )
+    {
+        if( !p_sys->p_segment || !p_sys->p_segment->p_demux )
+        {
+            msg_Err( p_demux, "NULL segment or demux, maybe EOF" );
+            return 0;
+        }
+
+        int i_demux_ret = demux_Demux( p_sys->p_segment->p_demux );
+        if( i_demux_ret != 0 )
+        {
+            if( i_demux_ret > 0 && b_stop_buffering)
+            {
+                es_out_GetEmpty( p_demux->out );
+                b_stop_buffering = false;
+            }
+
+            int64_t i_cached_size = 0;
+            int i_ret = stream_Control( p_sys->p_segment->p_stream,
+                                       STREAM_GET_CACHED_SIZE,
+                                       &i_cached_size );
+
+            /* Send cached total event */
+            if( VLC_SUCCESS == i_ret &&
+                i_cached_size > 0 &&
+                p_sys->p_segment->i_duration > 0 )
+            {
+                int64_t i_size = stream_Size( p_sys->p_segment->p_stream );
+                if ( i_size > 0 && i_size >= i_cached_size )
+                {
+                    float f_total_cached = i_cached_size;
+                    f_total_cached /= i_size;
+                    f_total_cached *= p_sys->p_segment->i_duration;
+                    f_total_cached += p_sys->p_segment->i_start_time;
+                    f_total_cached /= p_sys->p_playlist->i_total_duration;
+
+                    int i_total_cached_percent = f_total_cached * 100;
+                    if( p_sys->i_last_total_cached_percent != i_total_cached_percent &&
+                        i_total_cached_percent >= 0 && i_total_cached_percent <= 100 )
+                    {
+                        input_thread_t *p_input = demux_GetParentInput( p_demux );
+                        if( p_input )
+                        {
+                            input_SendEventCacheTotal( p_input, f_total_cached );
+                            p_sys->i_last_total_cached_percent = i_total_cached_percent;
+                        }
+                    }
+                }
+            }
+
+            return i_demux_ret;  /* success or fail */
+        }
+
+        /* segment EOF */
+        assert( p_sys->p_playlist );
+        vlc_array_t *p_segment_array = p_sys->p_playlist->p_segment_array;
+        assert( p_segment_array );
+
+        /* test if whole stream EOF */
+        if( p_sys->p_segment->i_order + 1 >= vlc_array_count( p_sys->p_playlist->p_segment_array ) )
+            break;
+
+        msg_Info( p_demux, "sina segment EOF, try next segment %d", p_sys->p_segment->i_order + 1 );
+
+        p_sys->b_segment_changed = false;
+        int i_ret = sina_AssureOpenSegment( p_demux, p_sys->p_segment->i_order + 1 );
+        if( VLC_SUCCESS != i_ret )
+            return -1;
+
+        if( p_sys->b_segment_changed )
+        {
+            /* wait es out empty, up to 'network-caching' */
+
+#define SINA_SEG_WAIT_STEP ( 50 * 1000 )
+            int64_t i_pts_delay = INT64_C(1000) * var_InheritInteger( p_demux, "network-caching" );
+            if( i_pts_delay < 0 )
+                i_pts_delay = 0;
+
+            for( int64_t i; i < i_pts_delay; i_pts_delay += SINA_SEG_WAIT_STEP )
+            {
+                if( es_out_GetEmpty( p_demux->out ) )
+                    break;
+
+                msleep( SINA_SEG_WAIT_STEP );
+            }
+
+            es_out_Control( p_demux->out, ES_OUT_RESET_PCR );
+            b_stop_buffering = true;
+        }
+    }
+
+    /* whole stream EOF */
+    return 0;
+}
+
+/****************************************************************************
+ * Control
+ ****************************************************************************/
+#if 0
+static void sina_DebugControlCode( demux_t *p_demux, int i_query )
+{
+    const char* p_debug_msg = "unknown";
+    switch( i_query )
+    {
+        case DEMUX_GET_POSITION:            p_debug_msg = "DEMUX_GET_POSITION"; break;
+        case DEMUX_SET_POSITION:            p_debug_msg = "DEMUX_SET_POSITION"; break;
+        case DEMUX_GET_LENGTH:              p_debug_msg = "DEMUX_GET_LENGTH"; break;
+        case DEMUX_GET_TIME:                p_debug_msg = "DEMUX_GET_TIME"; break;
+        case DEMUX_SET_TIME:                p_debug_msg = "DEMUX_SET_TIME"; break;
+        case DEMUX_GET_TITLE_INFO:          p_debug_msg = "DEMUX_GET_TITLE_INFO"; break;
+        case DEMUX_SET_TITLE:               p_debug_msg = "DEMUX_SET_TITLE"; break;
+        case DEMUX_SET_SEEKPOINT:           p_debug_msg = "DEMUX_SET_SEEKPOINT"; break;
+        case DEMUX_SET_GROUP:               p_debug_msg = "DEMUX_SET_GROUP"; break;
+        case DEMUX_SET_NEXT_DEMUX_TIME:     p_debug_msg = "DEMUX_SET_NEXT_DEMUX_TIME"; break;
+        case DEMUX_GET_FPS:                 p_debug_msg = "DEMUX_GET_FPS"; break;
+        case DEMUX_GET_META:                p_debug_msg = "DEMUX_GET_META"; break;
+        case DEMUX_HAS_UNSUPPORTED_META:    p_debug_msg = "DEMUX_HAS_UNSUPPORTED_META"; break;
+        case DEMUX_GET_ATTACHMENTS:         p_debug_msg = "DEMUX_GET_ATTACHMENTS"; break;
+        case DEMUX_CAN_RECORD:              p_debug_msg = "DEMUX_CAN_RECORD"; break;
+        case DEMUX_SET_RECORD_STATE:        p_debug_msg = "DEMUX_SET_RECORD_STATE"; break;
+        case DEMUX_CAN_PAUSE:               p_debug_msg = "DEMUX_CAN_PAUSE"; break;
+        case DEMUX_SET_PAUSE_STATE:         p_debug_msg = "DEMUX_SET_PAUSE_STATE"; break;
+        case DEMUX_GET_PTS_DELAY:           p_debug_msg = "DEMUX_GET_PTS_DELAY"; break;
+        case DEMUX_CAN_CONTROL_PACE:        p_debug_msg = "DEMUX_CAN_CONTROL_PACE"; break;
+        case DEMUX_CAN_CONTROL_RATE:        p_debug_msg = "DEMUX_CAN_CONTROL_RATE"; break;
+        case DEMUX_SET_RATE:                p_debug_msg = "DEMUX_SET_RATE"; break;
+        case DEMUX_CAN_SEEK:                p_debug_msg = "DEMUX_CAN_SEEK"; break;
+        case DEMUX_GET_SIGNAL:              p_debug_msg = "DEMUX_GET_SIGNAL"; break;
+    }
+
+    msg_SinaDebug( p_demux, "sina:Control:%s", p_debug_msg );
+}
+#endif
+
+static int sina_FindSegmentByTime( demux_t *p_demux, int64_t i_time )
+{
+    if( i_time <= 0 )
+        return 0;
+
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys );
+
+    sina_playlist_t *p_playlist = p_sys->p_playlist;
+    assert( p_playlist );
+
+    vlc_array_t *p_segment_array = p_playlist->p_segment_array;
+    assert( p_segment_array );
+
+    int count = vlc_array_count( p_segment_array );
+    if( 0 == count )
+        return 0;
+
+    for( int i = 0; i < count; ++i )
+    {
+        sina_segment_t *p_segment = vlc_array_item_at_index( p_segment_array, i );
+        assert( p_segment );
+
+        if( i_time < p_segment->i_start_time + p_segment->i_duration )
+            return i;
+    }
+
+    /* not found, return last segment */
+    return count - 1;
+}
+
+static int sina_ControlGetDuration( demux_t *p_demux, int64_t *p_duration )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+
+    *p_duration = (int64_t) p_sys->p_playlist->i_total_duration;
+    return VLC_SUCCESS;
+}
+
+static int sina_ControlGetTime( demux_t *p_demux, int64_t *p_time )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+
+    sina_segment_t *p_segment = p_sys->p_segment;
+    if( !p_segment || !p_segment->p_demux )
+        return VLC_EGENERIC;
+
+    int rc = demux_Control( p_segment->p_demux, DEMUX_GET_TIME, p_time );
+    if( rc != VLC_SUCCESS )
+        return rc;
+
+    *p_time += p_segment->i_start_time;
+    return rc;
+}
+
+static int sina_ControlSetTime( demux_t *p_demux, int64_t i_time )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+    msg_Info( p_demux, "sina seek %"PRId64, i_time );
+
+    int i_seek_to_segment = sina_FindSegmentByTime( p_demux, i_time );
+    msg_Info( p_demux, "sina seek to segment %d", i_seek_to_segment );
+
+    int i_ret = sina_AssureOpenSegment( p_demux, i_seek_to_segment );
+    if( i_ret != VLC_SUCCESS )
+        return i_ret;
+
+    sina_segment_t *p_segment = p_sys->p_segment;
+    if( !p_segment || !p_segment->p_demux )
+        return VLC_EGENERIC;
+
+    assert( i_time >= p_sys->p_segment->i_start_time );
+    if( i_time < p_sys->p_segment->i_start_time )
+    {
+        msg_Warn( p_demux, "sina seek time: %"PRId64" less than segment start time: %"PRId64,
+                 i_time,
+                 p_sys->p_segment->i_start_time );
+        i_time = p_sys->p_segment->i_start_time;
+    }
+
+    msg_Info( p_demux, "sina segment seek %"PRId64, i_time - p_sys->p_segment->i_start_time );
+    int rc = demux_Control( p_segment->p_demux, DEMUX_SET_TIME, i_time - p_sys->p_segment->i_start_time);
+    if( rc != VLC_SUCCESS )
+        return rc;
+
+    return rc;
+}
+
+static int sina_ControlGetPosition( demux_t *p_demux, double *p_position )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+
+    int64_t i_total_duration = 0;
+    int rc = sina_ControlGetDuration( p_demux, &i_total_duration );
+    if( rc != VLC_SUCCESS )
+        return rc;
+
+    if( i_total_duration <= 0 )
+        return VLC_EGENERIC;
+
+    int64_t i_playing_time = 0;
+    rc = sina_ControlGetTime( p_demux, &i_playing_time );
+    if( rc != VLC_SUCCESS )
+        return rc;
+
+    *p_position = (double) i_playing_time / i_total_duration;
+    return rc;
+}
+
+static int sina_ControlSetPosition( demux_t *p_demux, double d_position )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+
+    int64_t i_total_duration = 0;
+    int rc = sina_ControlGetDuration( p_demux, &i_total_duration );
+    if( rc != VLC_SUCCESS )
+        return rc;
+
+    if( i_total_duration <= 0 )
+        return VLC_EGENERIC;
+
+    int64_t i_segment_playing_time = i_total_duration * d_position;
+    return sina_ControlSetTime( p_demux, i_segment_playing_time );
+}
+
+static void sina_ControlSetPauseState( demux_t *p_demux, bool b_pause_state )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+
+    sina_segment_t *p_segment = p_sys->p_segment;
+    if( !p_segment || !p_segment->p_demux )
+        return;
+
+    if( p_segment->p_demux )
+        demux_Control( p_segment->p_demux, DEMUX_SET_PAUSE_STATE, b_pause_state );
+}
+
+static int Control( demux_t *p_demux, int i_query, va_list args )
+{
+    demux_sys_t *p_sys = p_demux->p_sys;
+    assert( p_sys);
+    assert( p_sys->p_segment );
+
+    if( !p_sys->p_segment->p_demux )
+    {
+        msg_Err( p_demux, "sina Control, null segment demux " );
+        return VLC_EGENERIC;
+    }
+
+    switch( i_query )
+    {
+        case DEMUX_GET_POSITION:
+        {
+            double *p_position = (double *) va_arg( args, double * );
+            return sina_ControlGetPosition( p_demux, p_position );
+        }
+        case DEMUX_SET_POSITION:
+        {
+            double d_position = (double) va_arg( args, double );
+            return sina_ControlSetPosition( p_demux, d_position );
+        }
+        case DEMUX_GET_TIME:
+        {
+            int64_t *p_time = (int64_t *) va_arg( args, int64_t * );
+            return sina_ControlGetTime( p_demux, p_time );
+        }
+        case DEMUX_SET_TIME:
+        {
+            int64_t i_time = (int64_t) va_arg( args, int64_t );
+            return sina_ControlSetTime( p_demux, i_time );
+        }
+        case DEMUX_GET_LENGTH:
+        {
+            int64_t *p_duration = (int64_t *) va_arg( args, int64_t * );
+            return sina_ControlGetDuration( p_demux, p_duration );
+        }
+        case DEMUX_CAN_PAUSE:
+        case DEMUX_CAN_SEEK:
+        case DEMUX_CAN_CONTROL_PACE:
+        {
+            *va_arg( args, bool * ) = true;
+            return VLC_SUCCESS;
+        }
+        case DEMUX_CAN_CONTROL_RATE:
+        {
+            *va_arg( args, bool * ) = false;
+            return VLC_SUCCESS;
+        }
+        case DEMUX_SET_PAUSE_STATE:
+        {
+            bool b_pause_state = va_arg( args, int );
+            sina_ControlSetPauseState( p_demux, b_pause_state );
+            return VLC_SUCCESS;
+        }
+        case DEMUX_GET_PTS_DELAY:
+        {
+            int64_t *p_pts_delay = va_arg( args, int64_t * );
+            *p_pts_delay = INT64_C(1000) * var_InheritInteger( p_demux, "network-caching" );
+
+            return VLC_SUCCESS;
+        }
+        default:
+        {
+            if( p_sys->p_segment && p_sys->p_segment->p_demux )
+                return demux_vaControl( p_sys->p_segment->p_demux, i_query, args );
+
+            return VLC_EGENERIC;
+        }
+    }
+
+    return VLC_EGENERIC;
+}
\ No newline at end of file
-- 
1.7.10.4


From d5ec012e39eea1da84149dff9f0665e32e3f0300 Mon Sep 17 00:00:00 2001
From: bbcallen <bbcallen@gmail.com>
Date: Wed, 13 Jun 2012 18:07:26 +0800
Subject: [PATCH 23/36] httplive: add close flag and condition

hls_Reload() thread now wait for close condition instead of just sleeping,
which make Close() return faster.
---
 modules/stream_filter/httplive.c |   32 ++++++++++++++++++++++++++------
 1 个文件被修改，插入 26 行(+)，删除 6 行(-)

diff --git a/modules/stream_filter/httplive.c b/modules/stream_filter/httplive.c
index 72e46af..300670c 100644
--- a/modules/stream_filter/httplive.c
+++ b/modules/stream_filter/httplive.c
@@ -143,6 +143,10 @@ struct stream_sys_t
     bool        b_live;     /* live stream? or vod? */
     bool        b_error;    /* parsing error */
     bool        b_aesmsg;   /* only print one time that the media is encrypted */
+
+    volatile bool b_close;  /* true if Close called */
+    vlc_mutex_t lock_close; /* for reload and download thread */
+    vlc_cond_t  cond_close; /* for reload and download thread */
 };
 
 /****************************************************************************
@@ -1587,7 +1591,7 @@ static void* hls_Thread(void *p_this)
 
     int canc = vlc_savecancel();
 
-    while (vlc_object_alive(s))
+    while (vlc_object_alive(s) && !p_sys->b_close)
     {
         hls_stream_t *hls = hls_Get(p_sys->hls_stream, p_sys->download.stream);
         assert(hls);
@@ -1610,7 +1614,7 @@ static void* hls_Thread(void *p_this)
                 vlc_cond_wait(&p_sys->download.wait, &p_sys->download.lock_wait);
                 if (p_sys->b_live /*&& (mdate() >= p_sys->playlist.wakeup)*/)
                     break;
-                if (!vlc_object_alive(s))
+                if (!vlc_object_alive(s) || p_sys->b_close)
                     break;
             }
             /* */
@@ -1622,7 +1626,7 @@ static void* hls_Thread(void *p_this)
             vlc_mutex_unlock(&p_sys->download.lock_wait);
         }
 
-        if (!vlc_object_alive(s)) break;
+        if (!vlc_object_alive(s) || p_sys->b_close) break;
 
         vlc_mutex_lock(&hls->lock);
         segment_t *segment = segment_GetSegment(hls, p_sys->download.segment);
@@ -1638,6 +1642,9 @@ static void* hls_Thread(void *p_this)
                 p_sys->b_error = true;
                 break;
             }
+
+            if (p_sys->b_close)
+                break;
         }
 
         /* download succeeded */
@@ -1668,7 +1675,7 @@ static void* hls_Reload(void *p_this)
     int canc = vlc_savecancel();
 
     double wait = 0.5;
-    while (vlc_object_alive(s))
+    while (vlc_object_alive(s) && !p_sys->b_close)
     {
         mtime_t now = mdate();
         if (now >= p_sys->playlist.wakeup)
@@ -1704,7 +1711,9 @@ static void* hls_Reload(void *p_this)
                                                    * (mtime_t)1000000);
         }
 
-        mwait(p_sys->playlist.wakeup);
+        vlc_mutex_lock(&p_sys->lock_close);
+        vlc_cond_timedwait(&p_sys->cond_close, &p_sys->lock_close, p_sys->playlist.wakeup);
+        vlc_mutex_unlock(&p_sys->lock_close);
     }
 
     vlc_restorecancel(canc);
@@ -2045,6 +2054,9 @@ static int Open(vlc_object_t *p_this)
     vlc_mutex_init(&p_sys->download.lock_wait);
     vlc_cond_init(&p_sys->download.wait);
 
+    vlc_mutex_init(&p_sys->lock_close);
+    vlc_cond_init(&p_sys->cond_close);
+
     /* Initialize HLS live stream */
     if (p_sys->b_live)
     {
@@ -2098,6 +2110,7 @@ static void Close(vlc_object_t *p_this)
     assert(p_sys->hls_stream);
 
     /* */
+    p_sys->b_close = true;
     vlc_mutex_lock(&p_sys->download.lock_wait);
     /* negate the condition variable's predicate */
     p_sys->download.segment = p_sys->playback.segment = 0;
@@ -2105,6 +2118,10 @@ static void Close(vlc_object_t *p_this)
     vlc_cond_signal(&p_sys->download.wait);
     vlc_mutex_unlock(&p_sys->download.lock_wait);
 
+    vlc_mutex_lock(&p_sys->lock_close);
+    vlc_cond_signal(&p_sys->cond_close);
+    vlc_mutex_unlock(&p_sys->lock_close);
+
     /* */
     if (p_sys->b_live)
         vlc_join(p_sys->reload, NULL);
@@ -2112,6 +2129,9 @@ static void Close(vlc_object_t *p_this)
     vlc_mutex_destroy(&p_sys->download.lock_wait);
     vlc_cond_destroy(&p_sys->download.wait);
 
+    vlc_mutex_destroy(&p_sys->lock_close);
+    vlc_cond_destroy(&p_sys->cond_close);
+
     /* Free hls streams */
     for (int i = 0; i < vlc_array_count(p_sys->hls_stream); i++)
     {
@@ -2302,7 +2322,7 @@ static int Read(stream_t *s, void *buffer, unsigned int i_read)
 
     assert(p_sys->hls_stream);
 
-    if (p_sys->b_error)
+    if (p_sys->b_error || p_sys->b_close)
         return 0;
 
     /* NOTE: buffer might be NULL if caller wants to skip data */
-- 
1.7.10.4


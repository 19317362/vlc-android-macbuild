From 6230f02970084bafd9ebd4ac1e72a6ea173b959c Mon Sep 17 00:00:00 2001
From: bbcallen <bbcallen@gmail.com>
Date: Tue, 29 May 2012 15:05:09 +0800
Subject: [PATCH 05/12] httplive: download segment without content-length

---
 modules/stream_filter/httplive.c |   55 ++++++++++++++++++++++++++++++++------
 1 个文件被修改，插入 47 行(+)，删除 8 行(-)

diff --git a/modules/stream_filter/httplive.c b/modules/stream_filter/httplive.c
index 68c1892..a9de3e6 100644
--- a/modules/stream_filter/httplive.c
+++ b/modules/stream_filter/httplive.c
@@ -1712,6 +1712,10 @@ static int Prefetch(stream_t *s, int *current)
 /****************************************************************************
  *
  ****************************************************************************/
+/* 1MB works for most situation, but we need a real stream buffer implement */
+#define HSL_DOWNLOAD_GROW (1024 * 1024)
+/* 10MB should be large enough for single segment in HLS */
+#define HSL_DOWNLOAD_GROW_MAX (10 * 1024 * 1024)
 static int hls_Download(stream_t *s, segment_t *segment)
 {
     assert(segment);
@@ -1720,17 +1724,21 @@ static int hls_Download(stream_t *s, segment_t *segment)
     if (p_ts == NULL)
         return VLC_EGENERIC;
 
-    segment->size = stream_Size(p_ts);
-    assert(segment->size > 0);
+    uint64_t alloc_size = stream_Size(p_ts);
+    if (alloc_size <= 0)
+    {
+        msg_Dbg(s, "segment has unknown size");
+        alloc_size = HSL_DOWNLOAD_GROW;
+    }
 
-    segment->data = block_Alloc(segment->size);
+    segment->data = block_Alloc(alloc_size);
     if (segment->data == NULL)
     {
         stream_Delete(p_ts);
         return VLC_ENOMEM;
     }
 
-    assert(segment->data->i_buffer == segment->size);
+    assert(segment->data->i_buffer == alloc_size);
 
     ssize_t length = 0, curlen = 0;
     uint64_t size;
@@ -1741,9 +1749,9 @@ static int hls_Download(stream_t *s, segment_t *segment)
          * and enlarge the segment data block if necessary.
          */
         size = stream_Size(p_ts);
-        if (size > segment->size)
+        if (size > 0 && size > segment->size)
         {
-            msg_Dbg(s, "size changed %"PRIu64, segment->size);
+            msg_Dbg(s, "size changed %"PRIu64, alloc_size);
             block_t *p_block = block_Realloc(segment->data, 0, size);
             if (p_block == NULL)
             {
@@ -1754,15 +1762,46 @@ static int hls_Download(stream_t *s, segment_t *segment)
             }
             segment->data = p_block;
             segment->size = size;
-            assert(segment->data->i_buffer == segment->size);
+            alloc_size = size;
+            assert(segment->data->i_buffer == alloc_size);
             p_block = NULL;
         }
-        length = stream_Read(p_ts, segment->data->p_buffer + curlen, segment->size - curlen);
+        else if (size <= 0 && (uint64_t)curlen >= alloc_size)
+        {
+            /* FIXME: buffer growing needs something more efficient like block_bytestream_t */
+            msg_Warn(s, "segment size need grow %"PRIu64, alloc_size);
+            if (curlen >= HSL_DOWNLOAD_GROW_MAX)
+            {
+                /* FIXME: too large size for single segment */
+                msg_Err(s, "too large size for single segment");
+                break;
+            }
+
+            alloc_size += HSL_DOWNLOAD_GROW;
+            block_t *p_block = block_Realloc(segment->data, 0, alloc_size);
+            if (p_block == NULL)
+            {
+                stream_Delete(p_ts);
+                block_Release(segment->data);
+                segment->data = NULL;
+                return VLC_ENOMEM;
+            }
+            segment->data = p_block;
+            assert(segment->data->i_buffer == alloc_size);
+            p_block = NULL;
+        }
+        length = stream_Read(p_ts, segment->data->p_buffer + curlen, alloc_size - curlen);
         if (length <= 0)
             break;
         curlen += length;
     } while (vlc_object_alive(s));
 
+    segment->size = curlen;
+
+    /* release unused buffer */
+    if (curlen > 0 && segment->data->i_buffer != (uint64_t)curlen)
+        segment->data = block_Realloc(segment->data, 0, curlen);
+
     stream_Delete(p_ts);
     return VLC_SUCCESS;
 }
-- 
1.7.10.2


From 40ac1bdee08f533224e1ebfc8dfe49792e3d5c34 Mon Sep 17 00:00:00 2001
From: bbcallen <bbcallen@gmail.com>
Date: Thu, 21 Jun 2012 15:44:20 +0800
Subject: [PATCH 07/17] core: es_out: implement es_out_managed

---
 include/vlc_es_out.h         |   3 +
 include/vlc_es_out_managed.h |  40 +++++++++
 src/input/es_out_managed.c   | 200 +++++++++++++++++++++++++++++++++++++++++++
 src/input/es_out_timeshift.c |   3 +
 4 files changed, 246 insertions(+)
 create mode 100644 include/vlc_es_out_managed.h
 create mode 100644 src/input/es_out_managed.c

diff --git a/include/vlc_es_out.h b/include/vlc_es_out.h
index cf1abce..b4c6b65 100644
--- a/include/vlc_es_out.h
+++ b/include/vlc_es_out.h
@@ -89,6 +89,9 @@ enum es_out_query_e
     ES_OUT_GET_PCR_SYSTEM, /* arg1=mtime_t *, arg2=mtime_t * res=can fail */
     ES_OUT_MODIFY_PCR_SYSTEM, /* arg1=int is_absolute, arg2=mtime_t, res=can fail */
 
+    /* For es_out_managed_t. Mark next block is discontinuity */
+    ES_OUT_POST_DISCONTINUITY,
+
     /* First value usable for private control */
     ES_OUT_PRIVATE_START = 0x10000,
 };
diff --git a/include/vlc_es_out_managed.h b/include/vlc_es_out_managed.h
new file mode 100644
index 0000000..70dca5d
--- /dev/null
+++ b/include/vlc_es_out_managed.h
@@ -0,0 +1,40 @@
+/*****************************************************************************
+ * vlc_es_out_managed.h
+ *****************************************************************************
+ *
+ * Authors: Rui Zhang <bbcallen _AT_ gmail _DOT_ com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_es.h>
+#include <vlc_es_out.h>
+
+/****************************************************************************
+ * ES_OUT managed
+ *
+ * Created a managed es_out, which can be destroyed
+ * without destroying original es_out_t
+ *
+ * Share a single es_out for multiple demux, at least working for demux/avformat
+ *
+ * call es_out_destroy() to destroy managed es_out
+ ****************************************************************************/
+
+VLC_API es_out_t *demux_EsOutManagedNew( demux_t *p_demux, es_out_t *p_backend_es_out );
\ No newline at end of file
diff --git a/src/input/es_out_managed.c b/src/input/es_out_managed.c
new file mode 100644
index 0000000..92b95ab
--- /dev/null
+++ b/src/input/es_out_managed.c
@@ -0,0 +1,200 @@
+/*****************************************************************************
+ * es_out_managed.c
+ *****************************************************************************
+ *
+ * Authors: Rui Zhang <bbcallen _AT_ gmail _DOT_ com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_es_out_managed.h>
+#include <vlc_demux.h>
+#include <assert.h>
+
+struct es_out_sys_t
+{
+    demux_t         *p_demux;           /* weak reference, for log */
+    es_out_t        *p_backend_out;     /* weak reference */
+
+    vlc_array_t     *p_es_fmt_cache;    /* fmt cache array */
+
+    bool            b_discontinuity;
+};
+
+typedef struct
+{
+    es_out_id_t *p_es_id;   /* weak reference */
+    es_format_t fmt;        /* need free */
+} es_out_fmt_entry;
+
+static es_out_id_t *EsFmtCacheFind( es_out_t *p_out, const es_format_t *p_fmt )
+{
+    es_out_sys_t *p_sys = p_out->p_sys;
+
+    vlc_array_t *p_es_fmt_cache = p_sys->p_es_fmt_cache;
+    for( int i = 0; i < vlc_array_count( p_sys->p_es_fmt_cache ); ++i )
+    {
+        es_out_fmt_entry *entry = (es_out_fmt_entry *) vlc_array_item_at_index( p_es_fmt_cache, i );
+        if( es_format_IsSimilar( &entry->fmt, p_fmt ) )
+            return entry->p_es_id;
+    }
+
+    return NULL;
+}
+
+static es_out_id_t *EsFmtCacheFindByCategory( es_out_t *p_out, int i_cat )
+{
+    es_out_sys_t *p_sys = p_out->p_sys;
+
+    vlc_array_t *p_es_fmt_cache = p_sys->p_es_fmt_cache;
+    for( int i = 0; i < vlc_array_count( p_sys->p_es_fmt_cache ); ++i )
+    {
+        es_out_fmt_entry *entry = (es_out_fmt_entry *) vlc_array_item_at_index( p_es_fmt_cache, i );
+        if( entry->fmt.i_cat == i_cat )
+            return entry->p_es_id;
+    }
+
+    return NULL;
+}
+
+static void EsFmtCacheAdd( es_out_t *p_out, es_out_id_t* p_es_id, const es_format_t *p_fmt )
+{
+    es_out_sys_t *p_sys = p_out->p_sys;
+
+    assert( !EsFmtCacheFind( p_out, p_fmt ) );
+
+    es_out_fmt_entry *entry = (es_out_fmt_entry *) malloc( sizeof(es_out_fmt_entry) );
+    if( entry == NULL )
+        return;
+    memset( entry, 0, sizeof(es_out_fmt_entry) );
+
+    entry->p_es_id = p_es_id;
+    es_format_Copy(&entry->fmt, p_fmt);
+
+    vlc_array_append( p_sys->p_es_fmt_cache , entry );
+}
+
+static es_out_id_t *EsOutAdd( es_out_t *p_out, const es_format_t *p_fmt )
+{
+    assert( p_out );
+    es_out_id_t *p_es_id = EsFmtCacheFindByCategory( p_out, p_fmt->i_cat );
+    if( p_es_id )
+    {
+        msg_Info( p_out->p_sys->p_demux, "EsOutAdd reuse: cat=%d", p_fmt->i_cat );
+        return p_es_id;
+    }
+    else
+    {
+        msg_Info( p_out->p_sys->p_demux, "EsOutAdd for the 1st time: cat=%d", p_fmt->i_cat );
+    }
+
+    p_es_id = es_out_Add( p_out->p_sys->p_backend_out, p_fmt );
+    if( p_es_id )
+        EsFmtCacheAdd( p_out, p_es_id, p_fmt );
+
+    return p_es_id;
+}
+
+static int EsOutSend( es_out_t *p_out, es_out_id_t *p_es, block_t *p_block )
+{
+    assert( p_out );
+    if( p_out->p_sys->b_discontinuity )
+    {
+        p_out->p_sys->b_discontinuity = false;
+        es_out_Control( p_out->p_sys->p_backend_out, ES_OUT_RESET_PCR );
+    }
+
+    return es_out_Send( p_out->p_sys->p_backend_out, p_es, p_block );
+}
+
+static void EsOutDel( es_out_t *p_out, es_out_id_t *p_es )
+{
+    assert( p_out );
+    es_out_Del( p_out->p_sys->p_backend_out, p_es );
+}
+
+static int EsOutControl( es_out_t *p_out, int i_query, va_list args )
+{
+    assert( p_out );
+    if( ES_OUT_POST_DISCONTINUITY == i_query )
+    {
+        p_out->p_sys->b_discontinuity = true;
+        return VLC_SUCCESS;
+    }
+
+    return es_out_vaControl( p_out->p_sys->p_backend_out, i_query, args );
+}
+
+static void EsOutDestroy( es_out_t *p_out )
+{
+    if( !p_out )
+        return;
+
+    vlc_array_t *p_es_fmt_cache = p_out->p_sys->p_es_fmt_cache;
+    if( p_es_fmt_cache )
+    {
+        int count = vlc_array_count( p_es_fmt_cache );
+        for( int i = 0; i < count; ++i )
+        {
+            es_out_fmt_entry* p_entry = (es_out_fmt_entry *) vlc_array_item_at_index( p_es_fmt_cache, i );
+            if( !p_entry )
+                continue;
+
+            es_format_Clean( &p_entry->fmt );
+            free( p_entry );
+        }
+
+        vlc_array_destroy( p_es_fmt_cache );
+        p_out->p_sys->p_es_fmt_cache = NULL;
+    }
+
+    free( p_out->p_sys );
+    free( p_out );
+}
+
+es_out_t *demux_EsOutManagedNew( demux_t *p_demux, es_out_t *p_backend_es_out )
+{
+    es_out_t *p_out = malloc( sizeof(*p_out) );
+    memset( p_out, 0, sizeof(*p_out) );
+
+    es_out_sys_t *p_sys;
+
+    if( !p_out )
+        return NULL;
+
+    p_out->pf_add     = EsOutAdd;
+    p_out->pf_send    = EsOutSend;
+    p_out->pf_del     = EsOutDel;
+    p_out->pf_control = EsOutControl;
+    p_out->pf_destroy = EsOutDestroy;
+
+    p_out->p_sys = p_sys = malloc( sizeof(*p_sys) );
+    if( !p_sys )
+    {
+        free( p_out );
+        return NULL;
+    }
+    memset( p_sys, 0, sizeof(*p_sys) );
+
+    p_sys->p_es_fmt_cache = vlc_array_new();
+    p_sys->p_demux = p_demux;
+    p_sys->p_backend_out = p_backend_es_out;
+
+    return p_out;
+}
\ No newline at end of file
diff --git a/src/input/es_out_timeshift.c b/src/input/es_out_timeshift.c
index c12d73a..68589da 100644
--- a/src/input/es_out_timeshift.c
+++ b/src/input/es_out_timeshift.c
@@ -606,6 +606,7 @@ static int ControlLocked( es_out_t *p_out, int i_query, va_list args )
     case ES_OUT_SET_TIMES:
     case ES_OUT_SET_JITTER:
     case ES_OUT_SET_EOS:
+    case ES_OUT_POST_DISCONTINUITY:
     {
         ts_cmd_t cmd;
         if( CmdInitControl( &cmd, i_query, args, p_sys->b_delayed ) )
@@ -1328,6 +1329,7 @@ static int CmdInitControl( ts_cmd_t *p_cmd, int i_query, va_list args, bool b_co
 
     case ES_OUT_RESET_PCR:           /* no arg */
     case ES_OUT_SET_EOS:
+    case ES_OUT_POST_DISCONTINUITY:
         break;
 
     case ES_OUT_SET_META:        /* arg1=const vlc_meta_t* */
@@ -1465,6 +1467,7 @@ static int CmdExecuteControl( es_out_t *p_out, ts_cmd_t *p_cmd )
 
     case ES_OUT_RESET_PCR:           /* no arg */
     case ES_OUT_SET_EOS:
+    case ES_OUT_POST_DISCONTINUITY:
         return es_out_Control( p_out, i_query );
 
     case ES_OUT_SET_GROUP_META:  /* arg1=int i_group arg2=const vlc_meta_t* */
-- 
2.1.2


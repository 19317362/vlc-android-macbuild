From 08bd9211485b56c7e216c9da9d2ccecd2270c034 Mon Sep 17 00:00:00 2001
From: bbcallen <bbcallen@gmail.com>
Date: Fri, 1 Mar 2013 17:18:36 +0800
Subject: [PATCH] androidnativewindow: vout using nativewindow

---
 lib/media_player.c                         |   30 +++
 modules/video_output/Modules.am            |    7 +
 modules/video_output/androidnativewindow.c |  308 ++++++++++++++++++++++++++++
 3 个文件被修改，插入 345 行(+)
 create mode 100644 modules/video_output/androidnativewindow.c

diff --git a/lib/media_player.c b/lib/media_player.c
index 37e1abb..1cdef71 100644
--- a/lib/media_player.c
+++ b/lib/media_player.c
@@ -413,6 +413,9 @@ libvlc_media_player_new( libvlc_instance_t *instance )
     var_Create (mp, "drawable-agl", VLC_VAR_INTEGER);
     var_Create (mp, "drawable-nsobject", VLC_VAR_ADDRESS);
 #endif
+#ifdef __ANDROID__
+    var_Create (mp, "drawable-nativewindow", VLC_VAR_ADDRESS);
+#endif
 
     var_Create (mp, "keyboard-events", VLC_VAR_BOOL);
     var_SetBool (mp, "keyboard-events", true);
@@ -959,6 +962,33 @@ void *libvlc_media_player_get_hwnd( libvlc_media_player_t *p_mi )
 #endif
 }
 
+/**************************************************************************
+ * set_nativewindow
+ **************************************************************************/
+void libvlc_media_player_set_nativewindow( libvlc_media_player_t *p_mi,
+                                           void * nativewindow )
+{
+    assert (p_mi != NULL);
+#ifdef __ANDROID__
+    var_SetAddress (p_mi, "drawable-nativewindow", nativewindow);
+#else
+    (void) p_mi; (void)drawable;
+#endif
+}
+
+/**************************************************************************
+ * get_nativewindow
+ **************************************************************************/
+void * libvlc_media_player_get_nativewindow( libvlc_media_player_t *p_mi )
+{
+    assert (p_mi != NULL);
+#ifdef __ANDROID__
+    return var_GetAddress (p_mi, "drawable-nativewindow");
+#else
+    return NULL;
+#endif
+}
+
 void libvlc_audio_set_callbacks( libvlc_media_player_t *mp,
                                  libvlc_audio_play_cb play_cb,
                                  libvlc_audio_pause_cb pause_cb,
diff --git a/modules/video_output/Modules.am b/modules/video_output/Modules.am
index aa05454..f586145 100644
--- a/modules/video_output/Modules.am
+++ b/modules/video_output/Modules.am
@@ -10,6 +10,13 @@ SOURCES_vout_macosx = macosx.m opengl.h opengl.c
 SOURCES_vout_ios = ios.m opengl.h opengl.c
 SOURCES_android_surface = androidsurface.c
 
+if HAVE_ANDROID
+libandroidnativewindow_plugin_la_SOURCES = androidnativewindow.c
+libandroidnativewindow_plugin_la_CFLAGS = $(AM_CFLAGS)
+libandroidnativewindow_plugin_la_LIBADD = $(AM_LIBADD)
+libvlc_LTLIBRARIES += libandroidnativewindow_plugin.la
+endif
+
 if HAVE_DECKLINK
 libdecklinkoutput_plugin_la_SOURCES = decklink.cpp
 libdecklinkoutput_plugin_la_CXXFLAGS = $(AM_CFLAGS) $(CXXFLAGS_decklinkoutput)
diff --git a/modules/video_output/androidnativewindow.c b/modules/video_output/androidnativewindow.c
new file mode 100644
index 0000000..650b264
--- /dev/null
+++ b/modules/video_output/androidnativewindow.c
@@ -0,0 +1,308 @@
+/*****************************************************************************
+ * androidnativewindow.c: android video output using ANativeWindow api
+ *****************************************************************************
+ * Copyright © 2011 VideoLAN
+ *
+ * Authors: Ming Hu <tewilove@gmail.com>
+ *          Ludovic Fauvet <etix@l0cal.com>
+ *          Sébastien Toque <xilasz@gmail.com>
+ *          Rui Zhang <bbcallen@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_plugin.h>
+#include <vlc_vout_display.h>
+#include <vlc_picture_pool.h>
+
+#include <dlfcn.h>
+
+#include <android/native_window.h>
+#include <android/native_window_jni.h>
+
+/*****************************************************************************
+ * Module descriptor
+ *****************************************************************************/
+#define CHROMA_TEXT N_("Chroma used")
+#define CHROMA_LONGTEXT N_(\
+    "Force use of a specific chroma for output. Default is RGB32.")
+
+#define CFG_PREFIX "androidnativewindow-"
+
+static int  Open (vlc_object_t *);
+static void Close(vlc_object_t *);
+
+vlc_module_begin()
+    set_category(CAT_VIDEO)
+    set_subcategory(SUBCAT_VIDEO_VOUT)
+    set_shortname("AndroidNativeWindow")
+    set_description(N_("Android Native Window video output"))
+    set_capability("vout display", 160)
+    add_shortcut("androidnativewindow", "android")
+    add_string(CFG_PREFIX "chroma", NULL, CHROMA_TEXT, CHROMA_LONGTEXT, true)
+    set_callbacks(Open, Close)
+vlc_module_end()
+
+/*****************************************************************************
+ * Local prototypes
+ *****************************************************************************/
+
+static picture_pool_t   *Pool  (vout_display_t *, unsigned);
+static void             Display(vout_display_t *, picture_t *, subpicture_t *);
+static int              Control(vout_display_t *, int, va_list);
+
+/* */
+struct vout_display_sys_t {
+    picture_pool_t *pool;
+    picture_resource_t resource;
+
+    ANativeWindow *p_native_window;
+    int i_hal_format;
+
+    /* density */
+    int i_sar_num;
+    int i_sar_den;
+};
+
+struct picture_sys_t {
+    vout_display_sys_t *sys;
+};
+
+static int  AndroidLockSurface(picture_t *);
+static void AndroidUnlockSurface(picture_t *);
+
+static int Open(vlc_object_t *p_this)
+{
+    vout_display_t *vd = (vout_display_t *)p_this;
+
+    /* Allocate structure */
+    vout_display_sys_t *sys = (struct vout_display_sys_t*) calloc(1, sizeof(*sys));
+    if (!sys) {
+        return VLC_ENOMEM;
+    }
+
+    /*
+     * TODO: Dynamic load symbol from libandroid
+     * to fall back to android-surface on 2.1/2.2
+     */
+
+    sys->p_native_window = var_InheritAddress( vd, "drawable-nativewindow" );
+    if( !sys->p_native_window )
+    {
+        free( sys );
+        msg_Err( vd, "NULL drawable-nativewindow" );
+        return VLC_EGENERIC;
+    }
+
+    /* Setup chroma */
+    video_format_t fmt = vd->fmt;
+
+    char *psz_fcc = var_InheritString(vd, CFG_PREFIX "chroma");
+    if( psz_fcc ) {
+        fmt.i_chroma = vlc_fourcc_GetCodecFromString(VIDEO_ES, psz_fcc);
+        free(psz_fcc);
+    } else {
+        fmt.i_chroma = VLC_CODEC_RGB32;
+    }
+
+    switch(fmt.i_chroma) {
+        case VLC_CODEC_RGB16:
+            fmt.i_bmask = 0x0000001f;
+            fmt.i_gmask = 0x000007e0;
+            fmt.i_rmask = 0x0000f800;
+            sys->i_hal_format = WINDOW_FORMAT_RGB_565;
+            break;
+
+        case VLC_CODEC_RGB32:
+            fmt.i_rmask  = 0x000000ff;
+            fmt.i_gmask  = 0x0000ff00;
+            fmt.i_bmask  = 0x00ff0000;
+            sys->i_hal_format = WINDOW_FORMAT_RGB_565;
+            break;
+
+        default:
+            return VLC_EGENERIC;
+    }
+    video_format_FixRgb(&fmt);
+
+    msg_Dbg(vd, "Pixel format %4.4s", (char*)&fmt.i_chroma);
+    // FIXME: check return
+    ANativeWindow_setBuffersGeometry( sys->p_native_window, 0, 0, sys->i_hal_format );
+
+    /* Create the associated picture */
+    picture_resource_t *rsc = &sys->resource;
+    rsc->p_sys = malloc(sizeof(*rsc->p_sys));
+    if (!rsc->p_sys)
+        goto enomem;
+    rsc->p_sys->sys = sys;
+
+    for (int i = 0; i < PICTURE_PLANE_MAX; i++) {
+        rsc->p[i].p_pixels = NULL;
+        rsc->p[i].i_pitch = 0;
+        rsc->p[i].i_lines = 0;
+    }
+    picture_t *picture = picture_NewFromResource(&fmt, rsc);
+    if (!picture)
+        goto enomem;
+
+    /* Wrap it into a picture pool */
+    picture_pool_configuration_t pool_cfg;
+    memset(&pool_cfg, 0, sizeof(pool_cfg));
+    pool_cfg.picture_count = 1;
+    pool_cfg.picture       = &picture;
+    pool_cfg.lock          = AndroidLockSurface;
+    pool_cfg.unlock        = AndroidUnlockSurface;
+
+    sys->pool = picture_pool_NewExtended(&pool_cfg);
+    if (!sys->pool) {
+        picture_Release(picture);
+        goto enomem;
+    }
+
+    /* Setup vout_display */
+    vd->sys     = sys;
+    vd->fmt     = fmt;
+    vd->pool    = Pool;
+    vd->display = Display;
+    vd->control = Control;
+    vd->prepare = NULL;
+    vd->manage  = NULL;
+
+    /* Fix initial state */
+    vout_display_SendEventFullscreen(vd, false);
+
+    sys->i_sar_num = vd->source.i_sar_num;
+    sys->i_sar_den = vd->source.i_sar_den;
+
+    return VLC_SUCCESS;
+
+enomem:
+    free(rsc->p_sys);
+    free(sys);
+    return VLC_ENOMEM;
+}
+
+static void Close(vlc_object_t *p_this)
+{
+    vout_display_t *vd = (vout_display_t *)p_this;
+    vout_display_sys_t *sys = vd->sys;
+
+    picture_pool_Delete(sys->pool);
+    free(sys);
+}
+
+static picture_pool_t *Pool(vout_display_t *vd, unsigned count)
+{
+    VLC_UNUSED(count);
+
+    return vd->sys->pool;
+}
+
+static int  AndroidLockSurface(picture_t *picture)
+{
+    picture_sys_t *picsys = picture->p_sys;
+    vout_display_sys_t *sys = picsys->sys;
+    ANativeWindow* p_native_window = sys->p_native_window;
+    uint32_t sw, sh;
+    ANativeWindow_Buffer native_buffer;
+
+    sw = picture->p[0].i_visible_pitch / picture->p[0].i_pixel_pitch;
+    sh = picture->p[0].i_visible_lines;
+
+    // For RGB (32 or 16) we need to align on 8 or 4 pixels, 16 pixels for YUV
+    int align_pixels = (16 / picture->p[0].i_pixel_pitch) - 1;
+    uint32_t aligned_width = (sw + align_pixels) & ~align_pixels;
+
+    // check native window size before lock
+    // FIXME: native window could be changed while playing
+    int32_t i_win_width = ANativeWindow_getWidth( p_native_window );
+    int32_t i_win_height = ANativeWindow_getHeight( p_native_window );
+    int32_t i_hal_format = ANativeWindow_getFormat( p_native_window );
+
+    if ( i_win_width != (int32_t)aligned_width ||
+         i_win_height != (int32_t)sh ||
+         i_hal_format != (int32_t)sys->i_hal_format )
+    {
+        // input size doesn't match the surface size -> request a resize
+        ANativeWindow_setBuffersGeometry( p_native_window, aligned_width, sh, sys->i_hal_format );
+        return VLC_EGENERIC;
+    }
+
+    // FIXME: check return
+    ANativeWindow_lock( p_native_window, &native_buffer, NULL );
+    if ( native_buffer.width != (int32_t)aligned_width ||
+         native_buffer.height != (int32_t)sh ||
+         native_buffer.format != (int32_t)sys->i_hal_format )
+    {
+        // input size doesn't match the surface size -> request a resize
+        ANativeWindow_setBuffersGeometry( p_native_window, aligned_width, sh, sys->i_hal_format );
+        ANativeWindow_unlockAndPost( p_native_window );
+        return VLC_EGENERIC;
+    }
+
+    picture->p[0].p_pixels = (uint8_t*) native_buffer.bits;
+    picture->p[0].i_lines = native_buffer.height;
+    picture->p[0].i_pitch = picture->p[0].i_pixel_pitch * native_buffer.stride;
+
+    return VLC_SUCCESS;
+}
+
+static void AndroidUnlockSurface(picture_t *picture)
+{
+    picture_sys_t *picsys = picture->p_sys;
+    vout_display_sys_t *sys = picsys->sys;
+
+    // FIXME: native window could be changed while playing
+    if ( likely( sys->p_native_window ) )
+        ANativeWindow_unlockAndPost( sys->p_native_window );
+}
+
+static void Display(vout_display_t *vd, picture_t *picture, subpicture_t *subpicture)
+{
+    VLC_UNUSED(vd);
+    VLC_UNUSED(subpicture);
+
+    /* refcount lowers to 0, and pool_cfg.unlock is called */
+
+    picture_Release(picture);
+}
+
+static int Control(vout_display_t *vd, int query, va_list args)
+{
+    VLC_UNUSED(args);
+
+    switch (query) {
+    case VOUT_DISPLAY_HIDE_MOUSE:
+        return VLC_SUCCESS;
+
+    default:
+        msg_Err(vd, "Unknown request in android vout display");
+
+    case VOUT_DISPLAY_CHANGE_FULLSCREEN:
+    case VOUT_DISPLAY_CHANGE_WINDOW_STATE:
+    case VOUT_DISPLAY_CHANGE_DISPLAY_SIZE:
+    case VOUT_DISPLAY_CHANGE_DISPLAY_FILLED:
+    case VOUT_DISPLAY_CHANGE_ZOOM:
+    case VOUT_DISPLAY_CHANGE_SOURCE_ASPECT:
+    case VOUT_DISPLAY_CHANGE_SOURCE_CROP:
+    case VOUT_DISPLAY_GET_OPENGL:
+        return VLC_EGENERIC;
+    }
+}
-- 
1.7.10.4

